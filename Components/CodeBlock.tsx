import React, { useState, useMemo } from 'react';
import { CopyIcon, CheckIcon } from './Icons.tsx';

// Informs TypeScript that `hljs` is available on the global window object
// because it's loaded from a <script> tag in index.html.
declare const hljs: any;

interface CodeBlockProps {
  code: string;
  language: string;
}

// A more robust HTML escaper to ensure the fallback is safe.
const escapeHtml = (unsafe: string): string => {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
};

// This component now uses a React-idiomatic approach by setting innerHTML.
// It's wrapped in an ErrorBoundary in MarkdownRenderer to catch potential
// errors from highlight.js, preventing app crashes.
export const CodeBlock = ({ code, language }: CodeBlockProps) => {
  const [isCopied, setIsCopied] = useState(false);

  // useMemo hook to perform the highlighting only when code or language changes.
  // This is more performant than doing it on every render.
  const highlightedCode = useMemo(() => {
    try {
      // Check if the language is supported by highlight.js
      const validLang = language && hljs.getLanguage(language) ? language : 'plaintext';
      // Use highlight.js to get the HTML string with syntax highlighting
      return hljs.highlight(code, { language: validLang, ignoreIllegals: true }).value;
    } catch (error) {
      // Log the error with context for easier debugging.
      console.error("Highlight.js error:", error, { language, codeSnippet: code.substring(0, 100) });
      // Fallback to plain, fully-escaped text on error. This is a critical security measure.
      return escapeHtml(code);
    }
  }, [code, language]);

  const handleCopy = () => {
    navigator.clipboard.writeText(code).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2500);
    }).catch(err => {
      console.error('Failed to copy code: ', err);
    });
  };
  
  const langClass = `language-${language || 'plaintext'}`;

  return (
    <div className="relative group text-left my-4">
      <button
        onClick={handleCopy}
        className="absolute top-2 right-2 z-10 p-1.5 bg-black/50 text-[var(--hud-color)] opacity-0 group-hover:opacity-100 focus:opacity-100 transition-all duration-200 hover:bg-[var(--hud-color)] hover:text-black focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]"
        aria-label={isCopied ? "Copied" : "Copy code"}
      >
        {isCopied ? <CheckIcon className="h-5 w-5" /> : <CopyIcon className="h-5 w-5" />}
      </button>
      <pre className="overflow-x-auto">
        {/* The dangerouslySetInnerHTML prop is used to render the HTML
            generated by highlight.js. This is an acceptable risk as the content
            originates from user/AI input and is either processed by a trusted library
            or, in case of failure, is rigorously escaped to prevent XSS. */}
        <code
          className={langClass}
          dangerouslySetInnerHTML={{ __html: highlightedCode }}
        />
      </pre>
    </div>
  );
};
